
7_SEGMENT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000976  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000c18  00000000  00000000  000009cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000011dc  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 25 04 	call	0x84a	; 0x84a <main>
  64:	0c 94 b9 04 	jmp	0x972	; 0x972 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_init>:
 * Input:	void
 * Output:  void
 * return:	void
 * prerequisites:	No prerequisites
 */
void GPIO_init(void) {
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0;		//Initialize portA pins to input
  74:	ea e3       	ldi	r30, 0x3A	; 58
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	10 82       	st	Z, r1
	DDRB = 0;		//Initialize portB pins to input
  7a:	e7 e3       	ldi	r30, 0x37	; 55
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	10 82       	st	Z, r1
	DDRC = 0;		//Initialize portC pins to input
  80:	e4 e3       	ldi	r30, 0x34	; 52
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	10 82       	st	Z, r1
	DDRD = 0;		//Initialize portD pins to input
  86:	e1 e3       	ldi	r30, 0x31	; 49
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	10 82       	st	Z, r1

	PORTA = 0;
  8c:	eb e3       	ldi	r30, 0x3B	; 59
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	10 82       	st	Z, r1
	PORTB = 0;
  92:	e8 e3       	ldi	r30, 0x38	; 56
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	10 82       	st	Z, r1
	PORTC = 0;
  98:	e5 e3       	ldi	r30, 0x35	; 53
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	10 82       	st	Z, r1
	PORTD = 0;
  9e:	e2 e3       	ldi	r30, 0x32	; 50
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	10 82       	st	Z, r1

	//Enable Global Pull-up resistor's control
	CLEAR_BIT(SFIOR, PUD);
  a4:	a0 e5       	ldi	r26, 0x50	; 80
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	e0 e5       	ldi	r30, 0x50	; 80
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	8b 7f       	andi	r24, 0xFB	; 251
  b0:	8c 93       	st	X, r24
}
  b2:	cf 91       	pop	r28
  b4:	df 91       	pop	r29
  b6:	08 95       	ret

000000b8 <GPIO_setPinDirection>:
 * 			state	-Required state (INPUT, OUTPUT)
 * Output:  No output
 * return:	StdReturn	-return the API status
 * prerequisites:	GPIO module to be initialized
 */
StdReturn GPIO_setPinDirection(GPIO_port port, uint8 pin, GPIO_pinType state) {
  b8:	df 93       	push	r29
  ba:	cf 93       	push	r28
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	2e 97       	sbiw	r28, 0x0e	; 14
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
  cc:	89 83       	std	Y+1, r24	; 0x01
  ce:	6a 83       	std	Y+2, r22	; 0x02
  d0:	4b 83       	std	Y+3, r20	; 0x03
	//Check for input correctness
	if (pin > MAX_PIN_NUMBER) {
  d2:	8a 81       	ldd	r24, Y+2	; 0x02
  d4:	88 30       	cpi	r24, 0x08	; 8
  d6:	18 f0       	brcs	.+6      	; 0xde <GPIO_setPinDirection+0x26>
		return E_NOK;
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	2e 87       	std	Y+14, r18	; 0x0e
  dc:	12 c1       	rjmp	.+548    	; 0x302 <GPIO_setPinDirection+0x24a>
	} else {
		switch (port) {
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	28 2f       	mov	r18, r24
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	3d 87       	std	Y+13, r19	; 0x0d
  e6:	2c 87       	std	Y+12, r18	; 0x0c
  e8:	8c 85       	ldd	r24, Y+12	; 0x0c
  ea:	9d 85       	ldd	r25, Y+13	; 0x0d
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	91 05       	cpc	r25, r1
  f0:	09 f4       	brne	.+2      	; 0xf4 <GPIO_setPinDirection+0x3c>
  f2:	52 c0       	rjmp	.+164    	; 0x198 <GPIO_setPinDirection+0xe0>
  f4:	2c 85       	ldd	r18, Y+12	; 0x0c
  f6:	3d 85       	ldd	r19, Y+13	; 0x0d
  f8:	22 30       	cpi	r18, 0x02	; 2
  fa:	31 05       	cpc	r19, r1
  fc:	2c f4       	brge	.+10     	; 0x108 <GPIO_setPinDirection+0x50>
  fe:	8c 85       	ldd	r24, Y+12	; 0x0c
 100:	9d 85       	ldd	r25, Y+13	; 0x0d
 102:	00 97       	sbiw	r24, 0x00	; 0
 104:	71 f0       	breq	.+28     	; 0x122 <GPIO_setPinDirection+0x6a>
 106:	f9 c0       	rjmp	.+498    	; 0x2fa <GPIO_setPinDirection+0x242>
 108:	2c 85       	ldd	r18, Y+12	; 0x0c
 10a:	3d 85       	ldd	r19, Y+13	; 0x0d
 10c:	22 30       	cpi	r18, 0x02	; 2
 10e:	31 05       	cpc	r19, r1
 110:	09 f4       	brne	.+2      	; 0x114 <GPIO_setPinDirection+0x5c>
 112:	7d c0       	rjmp	.+250    	; 0x20e <GPIO_setPinDirection+0x156>
 114:	8c 85       	ldd	r24, Y+12	; 0x0c
 116:	9d 85       	ldd	r25, Y+13	; 0x0d
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	91 05       	cpc	r25, r1
 11c:	09 f4       	brne	.+2      	; 0x120 <GPIO_setPinDirection+0x68>
 11e:	b2 c0       	rjmp	.+356    	; 0x284 <GPIO_setPinDirection+0x1cc>
 120:	ec c0       	rjmp	.+472    	; 0x2fa <GPIO_setPinDirection+0x242>
		//Controlling PORTA
		case GPIO_PORTA:
			switch (state) {
 122:	8b 81       	ldd	r24, Y+3	; 0x03
 124:	28 2f       	mov	r18, r24
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	3b 87       	std	Y+11, r19	; 0x0b
 12a:	2a 87       	std	Y+10, r18	; 0x0a
 12c:	8a 85       	ldd	r24, Y+10	; 0x0a
 12e:	9b 85       	ldd	r25, Y+11	; 0x0b
 130:	00 97       	sbiw	r24, 0x00	; 0
 132:	31 f0       	breq	.+12     	; 0x140 <GPIO_setPinDirection+0x88>
 134:	2a 85       	ldd	r18, Y+10	; 0x0a
 136:	3b 85       	ldd	r19, Y+11	; 0x0b
 138:	21 30       	cpi	r18, 0x01	; 1
 13a:	31 05       	cpc	r19, r1
 13c:	b1 f0       	breq	.+44     	; 0x16a <GPIO_setPinDirection+0xb2>
 13e:	29 c0       	rjmp	.+82     	; 0x192 <GPIO_setPinDirection+0xda>
			case GPIO_INPUT:
				CLEAR_BIT(DDRA, pin);
 140:	aa e3       	ldi	r26, 0x3A	; 58
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	ea e3       	ldi	r30, 0x3A	; 58
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	48 2f       	mov	r20, r24
 14c:	8a 81       	ldd	r24, Y+2	; 0x02
 14e:	28 2f       	mov	r18, r24
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 2e       	mov	r0, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <GPIO_setPinDirection+0xa6>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <GPIO_setPinDirection+0xa2>
 162:	80 95       	com	r24
 164:	84 23       	and	r24, r20
 166:	8c 93       	st	X, r24
 168:	cb c0       	rjmp	.+406    	; 0x300 <GPIO_setPinDirection+0x248>
				break;
			case GPIO_OUTPUT:
				SET_BIT(DDRA, pin);
 16a:	aa e3       	ldi	r26, 0x3A	; 58
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	ea e3       	ldi	r30, 0x3A	; 58
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	48 2f       	mov	r20, r24
 176:	8a 81       	ldd	r24, Y+2	; 0x02
 178:	28 2f       	mov	r18, r24
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 2e       	mov	r0, r18
 182:	02 c0       	rjmp	.+4      	; 0x188 <GPIO_setPinDirection+0xd0>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <GPIO_setPinDirection+0xcc>
 18c:	84 2b       	or	r24, r20
 18e:	8c 93       	st	X, r24
 190:	b7 c0       	rjmp	.+366    	; 0x300 <GPIO_setPinDirection+0x248>
				break;
			default:
				return E_NOK;
 192:	31 e0       	ldi	r19, 0x01	; 1
 194:	3e 87       	std	Y+14, r19	; 0x0e
 196:	b5 c0       	rjmp	.+362    	; 0x302 <GPIO_setPinDirection+0x24a>
			}
			break;
		//Controlling PORTB
		case GPIO_PORTB:
			switch (state) {
 198:	8b 81       	ldd	r24, Y+3	; 0x03
 19a:	28 2f       	mov	r18, r24
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	39 87       	std	Y+9, r19	; 0x09
 1a0:	28 87       	std	Y+8, r18	; 0x08
 1a2:	88 85       	ldd	r24, Y+8	; 0x08
 1a4:	99 85       	ldd	r25, Y+9	; 0x09
 1a6:	00 97       	sbiw	r24, 0x00	; 0
 1a8:	31 f0       	breq	.+12     	; 0x1b6 <GPIO_setPinDirection+0xfe>
 1aa:	28 85       	ldd	r18, Y+8	; 0x08
 1ac:	39 85       	ldd	r19, Y+9	; 0x09
 1ae:	21 30       	cpi	r18, 0x01	; 1
 1b0:	31 05       	cpc	r19, r1
 1b2:	b1 f0       	breq	.+44     	; 0x1e0 <GPIO_setPinDirection+0x128>
 1b4:	29 c0       	rjmp	.+82     	; 0x208 <GPIO_setPinDirection+0x150>
			case GPIO_INPUT:
				CLEAR_BIT(DDRB, pin);
 1b6:	a7 e3       	ldi	r26, 0x37	; 55
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	e7 e3       	ldi	r30, 0x37	; 55
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	48 2f       	mov	r20, r24
 1c2:	8a 81       	ldd	r24, Y+2	; 0x02
 1c4:	28 2f       	mov	r18, r24
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 2e       	mov	r0, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <GPIO_setPinDirection+0x11c>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	0a 94       	dec	r0
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <GPIO_setPinDirection+0x118>
 1d8:	80 95       	com	r24
 1da:	84 23       	and	r24, r20
 1dc:	8c 93       	st	X, r24
 1de:	90 c0       	rjmp	.+288    	; 0x300 <GPIO_setPinDirection+0x248>
				break;
			case GPIO_OUTPUT:
				SET_BIT(DDRB, pin);
 1e0:	a7 e3       	ldi	r26, 0x37	; 55
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	e7 e3       	ldi	r30, 0x37	; 55
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	48 2f       	mov	r20, r24
 1ec:	8a 81       	ldd	r24, Y+2	; 0x02
 1ee:	28 2f       	mov	r18, r24
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 2e       	mov	r0, r18
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <GPIO_setPinDirection+0x146>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	0a 94       	dec	r0
 200:	e2 f7       	brpl	.-8      	; 0x1fa <GPIO_setPinDirection+0x142>
 202:	84 2b       	or	r24, r20
 204:	8c 93       	st	X, r24
 206:	7c c0       	rjmp	.+248    	; 0x300 <GPIO_setPinDirection+0x248>
				break;
			default:
				return E_NOK;
 208:	31 e0       	ldi	r19, 0x01	; 1
 20a:	3e 87       	std	Y+14, r19	; 0x0e
 20c:	7a c0       	rjmp	.+244    	; 0x302 <GPIO_setPinDirection+0x24a>
			}
			break;
		//Controlling PORTC
		case GPIO_PORTC:
			switch (state) {
 20e:	8b 81       	ldd	r24, Y+3	; 0x03
 210:	28 2f       	mov	r18, r24
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	3f 83       	std	Y+7, r19	; 0x07
 216:	2e 83       	std	Y+6, r18	; 0x06
 218:	8e 81       	ldd	r24, Y+6	; 0x06
 21a:	9f 81       	ldd	r25, Y+7	; 0x07
 21c:	00 97       	sbiw	r24, 0x00	; 0
 21e:	31 f0       	breq	.+12     	; 0x22c <GPIO_setPinDirection+0x174>
 220:	2e 81       	ldd	r18, Y+6	; 0x06
 222:	3f 81       	ldd	r19, Y+7	; 0x07
 224:	21 30       	cpi	r18, 0x01	; 1
 226:	31 05       	cpc	r19, r1
 228:	b1 f0       	breq	.+44     	; 0x256 <GPIO_setPinDirection+0x19e>
 22a:	29 c0       	rjmp	.+82     	; 0x27e <GPIO_setPinDirection+0x1c6>
			case GPIO_INPUT:
				CLEAR_BIT(DDRC, pin);
 22c:	a4 e3       	ldi	r26, 0x34	; 52
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	e4 e3       	ldi	r30, 0x34	; 52
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	48 2f       	mov	r20, r24
 238:	8a 81       	ldd	r24, Y+2	; 0x02
 23a:	28 2f       	mov	r18, r24
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 2e       	mov	r0, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <GPIO_setPinDirection+0x192>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <GPIO_setPinDirection+0x18e>
 24e:	80 95       	com	r24
 250:	84 23       	and	r24, r20
 252:	8c 93       	st	X, r24
 254:	55 c0       	rjmp	.+170    	; 0x300 <GPIO_setPinDirection+0x248>
				break;
			case GPIO_OUTPUT:
				SET_BIT(DDRC, pin);
 256:	a4 e3       	ldi	r26, 0x34	; 52
 258:	b0 e0       	ldi	r27, 0x00	; 0
 25a:	e4 e3       	ldi	r30, 0x34	; 52
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	48 2f       	mov	r20, r24
 262:	8a 81       	ldd	r24, Y+2	; 0x02
 264:	28 2f       	mov	r18, r24
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 2e       	mov	r0, r18
 26e:	02 c0       	rjmp	.+4      	; 0x274 <GPIO_setPinDirection+0x1bc>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	0a 94       	dec	r0
 276:	e2 f7       	brpl	.-8      	; 0x270 <GPIO_setPinDirection+0x1b8>
 278:	84 2b       	or	r24, r20
 27a:	8c 93       	st	X, r24
 27c:	41 c0       	rjmp	.+130    	; 0x300 <GPIO_setPinDirection+0x248>
				break;
			default:
				return E_NOK;
 27e:	31 e0       	ldi	r19, 0x01	; 1
 280:	3e 87       	std	Y+14, r19	; 0x0e
 282:	3f c0       	rjmp	.+126    	; 0x302 <GPIO_setPinDirection+0x24a>
			}
			break;
		//Controlling PORTD
		case GPIO_PORTD:
			switch (state) {
 284:	8b 81       	ldd	r24, Y+3	; 0x03
 286:	28 2f       	mov	r18, r24
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	3d 83       	std	Y+5, r19	; 0x05
 28c:	2c 83       	std	Y+4, r18	; 0x04
 28e:	8c 81       	ldd	r24, Y+4	; 0x04
 290:	9d 81       	ldd	r25, Y+5	; 0x05
 292:	00 97       	sbiw	r24, 0x00	; 0
 294:	31 f0       	breq	.+12     	; 0x2a2 <GPIO_setPinDirection+0x1ea>
 296:	2c 81       	ldd	r18, Y+4	; 0x04
 298:	3d 81       	ldd	r19, Y+5	; 0x05
 29a:	21 30       	cpi	r18, 0x01	; 1
 29c:	31 05       	cpc	r19, r1
 29e:	b1 f0       	breq	.+44     	; 0x2cc <GPIO_setPinDirection+0x214>
 2a0:	29 c0       	rjmp	.+82     	; 0x2f4 <GPIO_setPinDirection+0x23c>
			case GPIO_INPUT:
				CLEAR_BIT(DDRD, pin);
 2a2:	a1 e3       	ldi	r26, 0x31	; 49
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	e1 e3       	ldi	r30, 0x31	; 49
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	48 2f       	mov	r20, r24
 2ae:	8a 81       	ldd	r24, Y+2	; 0x02
 2b0:	28 2f       	mov	r18, r24
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 2e       	mov	r0, r18
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <GPIO_setPinDirection+0x208>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	0a 94       	dec	r0
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <GPIO_setPinDirection+0x204>
 2c4:	80 95       	com	r24
 2c6:	84 23       	and	r24, r20
 2c8:	8c 93       	st	X, r24
 2ca:	1a c0       	rjmp	.+52     	; 0x300 <GPIO_setPinDirection+0x248>
				break;
			case GPIO_OUTPUT:
				SET_BIT(DDRD, pin);
 2cc:	a1 e3       	ldi	r26, 0x31	; 49
 2ce:	b0 e0       	ldi	r27, 0x00	; 0
 2d0:	e1 e3       	ldi	r30, 0x31	; 49
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	48 2f       	mov	r20, r24
 2d8:	8a 81       	ldd	r24, Y+2	; 0x02
 2da:	28 2f       	mov	r18, r24
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 2e       	mov	r0, r18
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <GPIO_setPinDirection+0x232>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	0a 94       	dec	r0
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <GPIO_setPinDirection+0x22e>
 2ee:	84 2b       	or	r24, r20
 2f0:	8c 93       	st	X, r24
 2f2:	06 c0       	rjmp	.+12     	; 0x300 <GPIO_setPinDirection+0x248>
				break;
			default:
				return E_NOK;
 2f4:	31 e0       	ldi	r19, 0x01	; 1
 2f6:	3e 87       	std	Y+14, r19	; 0x0e
 2f8:	04 c0       	rjmp	.+8      	; 0x302 <GPIO_setPinDirection+0x24a>
			}
			break;
		//Handling port name out of range
		default:
			return E_NOK;
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	8e 87       	std	Y+14, r24	; 0x0e
 2fe:	01 c0       	rjmp	.+2      	; 0x302 <GPIO_setPinDirection+0x24a>
		}
	}

	return E_OK;
 300:	1e 86       	std	Y+14, r1	; 0x0e
 302:	8e 85       	ldd	r24, Y+14	; 0x0e
}
 304:	2e 96       	adiw	r28, 0x0e	; 14
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	f8 94       	cli
 30a:	de bf       	out	0x3e, r29	; 62
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	cd bf       	out	0x3d, r28	; 61
 310:	cf 91       	pop	r28
 312:	df 91       	pop	r29
 314:	08 95       	ret

00000316 <GPIO_writePin>:
 * 			state	-Required state (High - Low)
 * Output:  No output
 * return:	StdReturn	-return the API status
 * prerequisites:	pin direction to be set OUTPUT
 */
StdReturn GPIO_writePin(GPIO_port port, uint8 pin, GPIO_pinState state) {
 316:	df 93       	push	r29
 318:	cf 93       	push	r28
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	2e 97       	sbiw	r28, 0x0e	; 14
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	f8 94       	cli
 324:	de bf       	out	0x3e, r29	; 62
 326:	0f be       	out	0x3f, r0	; 63
 328:	cd bf       	out	0x3d, r28	; 61
 32a:	89 83       	std	Y+1, r24	; 0x01
 32c:	6a 83       	std	Y+2, r22	; 0x02
 32e:	4b 83       	std	Y+3, r20	; 0x03

	if (pin > MAX_PIN_NUMBER) {
 330:	8a 81       	ldd	r24, Y+2	; 0x02
 332:	88 30       	cpi	r24, 0x08	; 8
 334:	18 f0       	brcs	.+6      	; 0x33c <GPIO_writePin+0x26>
		return E_NOK;
 336:	21 e0       	ldi	r18, 0x01	; 1
 338:	2e 87       	std	Y+14, r18	; 0x0e
 33a:	0b c1       	rjmp	.+534    	; 0x552 <GPIO_writePin+0x23c>
	} else {
		switch (port) {
 33c:	89 81       	ldd	r24, Y+1	; 0x01
 33e:	28 2f       	mov	r18, r24
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	3d 87       	std	Y+13, r19	; 0x0d
 344:	2c 87       	std	Y+12, r18	; 0x0c
 346:	8c 85       	ldd	r24, Y+12	; 0x0c
 348:	9d 85       	ldd	r25, Y+13	; 0x0d
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	91 05       	cpc	r25, r1
 34e:	09 f4       	brne	.+2      	; 0x352 <GPIO_writePin+0x3c>
 350:	51 c0       	rjmp	.+162    	; 0x3f4 <GPIO_writePin+0xde>
 352:	2c 85       	ldd	r18, Y+12	; 0x0c
 354:	3d 85       	ldd	r19, Y+13	; 0x0d
 356:	22 30       	cpi	r18, 0x02	; 2
 358:	31 05       	cpc	r19, r1
 35a:	2c f4       	brge	.+10     	; 0x366 <GPIO_writePin+0x50>
 35c:	8c 85       	ldd	r24, Y+12	; 0x0c
 35e:	9d 85       	ldd	r25, Y+13	; 0x0d
 360:	00 97       	sbiw	r24, 0x00	; 0
 362:	71 f0       	breq	.+28     	; 0x380 <GPIO_writePin+0x6a>
 364:	f5 c0       	rjmp	.+490    	; 0x550 <GPIO_writePin+0x23a>
 366:	2c 85       	ldd	r18, Y+12	; 0x0c
 368:	3d 85       	ldd	r19, Y+13	; 0x0d
 36a:	22 30       	cpi	r18, 0x02	; 2
 36c:	31 05       	cpc	r19, r1
 36e:	09 f4       	brne	.+2      	; 0x372 <GPIO_writePin+0x5c>
 370:	7b c0       	rjmp	.+246    	; 0x468 <GPIO_writePin+0x152>
 372:	8c 85       	ldd	r24, Y+12	; 0x0c
 374:	9d 85       	ldd	r25, Y+13	; 0x0d
 376:	83 30       	cpi	r24, 0x03	; 3
 378:	91 05       	cpc	r25, r1
 37a:	09 f4       	brne	.+2      	; 0x37e <GPIO_writePin+0x68>
 37c:	af c0       	rjmp	.+350    	; 0x4dc <GPIO_writePin+0x1c6>
 37e:	e8 c0       	rjmp	.+464    	; 0x550 <GPIO_writePin+0x23a>
		case GPIO_PORTA:
			switch (state) {
 380:	8b 81       	ldd	r24, Y+3	; 0x03
 382:	28 2f       	mov	r18, r24
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	3b 87       	std	Y+11, r19	; 0x0b
 388:	2a 87       	std	Y+10, r18	; 0x0a
 38a:	8a 85       	ldd	r24, Y+10	; 0x0a
 38c:	9b 85       	ldd	r25, Y+11	; 0x0b
 38e:	00 97       	sbiw	r24, 0x00	; 0
 390:	c9 f0       	breq	.+50     	; 0x3c4 <GPIO_writePin+0xae>
 392:	2a 85       	ldd	r18, Y+10	; 0x0a
 394:	3b 85       	ldd	r19, Y+11	; 0x0b
 396:	21 30       	cpi	r18, 0x01	; 1
 398:	31 05       	cpc	r19, r1
 39a:	49 f5       	brne	.+82     	; 0x3ee <GPIO_writePin+0xd8>
			case GPIO_HIGH:
				SET_BIT(PORTA, pin);
 39c:	ab e3       	ldi	r26, 0x3B	; 59
 39e:	b0 e0       	ldi	r27, 0x00	; 0
 3a0:	eb e3       	ldi	r30, 0x3B	; 59
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	48 2f       	mov	r20, r24
 3a8:	8a 81       	ldd	r24, Y+2	; 0x02
 3aa:	28 2f       	mov	r18, r24
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 2e       	mov	r0, r18
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <GPIO_writePin+0xa4>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	0a 94       	dec	r0
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <GPIO_writePin+0xa0>
 3be:	84 2b       	or	r24, r20
 3c0:	8c 93       	st	X, r24
 3c2:	c6 c0       	rjmp	.+396    	; 0x550 <GPIO_writePin+0x23a>
				break;
			case GPIO_LOW:
				CLEAR_BIT(PORTA, pin);
 3c4:	ab e3       	ldi	r26, 0x3B	; 59
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	eb e3       	ldi	r30, 0x3B	; 59
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	48 2f       	mov	r20, r24
 3d0:	8a 81       	ldd	r24, Y+2	; 0x02
 3d2:	28 2f       	mov	r18, r24
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 2e       	mov	r0, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <GPIO_writePin+0xcc>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	0a 94       	dec	r0
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <GPIO_writePin+0xc8>
 3e6:	80 95       	com	r24
 3e8:	84 23       	and	r24, r20
 3ea:	8c 93       	st	X, r24
 3ec:	b1 c0       	rjmp	.+354    	; 0x550 <GPIO_writePin+0x23a>
				break;
			default:
				return E_NOK;
 3ee:	31 e0       	ldi	r19, 0x01	; 1
 3f0:	3e 87       	std	Y+14, r19	; 0x0e
 3f2:	af c0       	rjmp	.+350    	; 0x552 <GPIO_writePin+0x23c>
			}
			break;

		case GPIO_PORTB:
			switch (state) {
 3f4:	8b 81       	ldd	r24, Y+3	; 0x03
 3f6:	28 2f       	mov	r18, r24
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	39 87       	std	Y+9, r19	; 0x09
 3fc:	28 87       	std	Y+8, r18	; 0x08
 3fe:	88 85       	ldd	r24, Y+8	; 0x08
 400:	99 85       	ldd	r25, Y+9	; 0x09
 402:	00 97       	sbiw	r24, 0x00	; 0
 404:	c9 f0       	breq	.+50     	; 0x438 <GPIO_writePin+0x122>
 406:	28 85       	ldd	r18, Y+8	; 0x08
 408:	39 85       	ldd	r19, Y+9	; 0x09
 40a:	21 30       	cpi	r18, 0x01	; 1
 40c:	31 05       	cpc	r19, r1
 40e:	49 f5       	brne	.+82     	; 0x462 <GPIO_writePin+0x14c>
			case GPIO_HIGH:
				SET_BIT(PORTB, pin);
 410:	a8 e3       	ldi	r26, 0x38	; 56
 412:	b0 e0       	ldi	r27, 0x00	; 0
 414:	e8 e3       	ldi	r30, 0x38	; 56
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	48 2f       	mov	r20, r24
 41c:	8a 81       	ldd	r24, Y+2	; 0x02
 41e:	28 2f       	mov	r18, r24
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	02 2e       	mov	r0, r18
 428:	02 c0       	rjmp	.+4      	; 0x42e <GPIO_writePin+0x118>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	0a 94       	dec	r0
 430:	e2 f7       	brpl	.-8      	; 0x42a <GPIO_writePin+0x114>
 432:	84 2b       	or	r24, r20
 434:	8c 93       	st	X, r24
 436:	8c c0       	rjmp	.+280    	; 0x550 <GPIO_writePin+0x23a>
				break;
			case GPIO_LOW:
				CLEAR_BIT(PORTB, pin);
 438:	a8 e3       	ldi	r26, 0x38	; 56
 43a:	b0 e0       	ldi	r27, 0x00	; 0
 43c:	e8 e3       	ldi	r30, 0x38	; 56
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	48 2f       	mov	r20, r24
 444:	8a 81       	ldd	r24, Y+2	; 0x02
 446:	28 2f       	mov	r18, r24
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 2e       	mov	r0, r18
 450:	02 c0       	rjmp	.+4      	; 0x456 <GPIO_writePin+0x140>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	0a 94       	dec	r0
 458:	e2 f7       	brpl	.-8      	; 0x452 <GPIO_writePin+0x13c>
 45a:	80 95       	com	r24
 45c:	84 23       	and	r24, r20
 45e:	8c 93       	st	X, r24
 460:	77 c0       	rjmp	.+238    	; 0x550 <GPIO_writePin+0x23a>
				break;
			default:
				return E_NOK;
 462:	31 e0       	ldi	r19, 0x01	; 1
 464:	3e 87       	std	Y+14, r19	; 0x0e
 466:	75 c0       	rjmp	.+234    	; 0x552 <GPIO_writePin+0x23c>
			}
			break;

		case GPIO_PORTC:
			switch (state) {
 468:	8b 81       	ldd	r24, Y+3	; 0x03
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	3f 83       	std	Y+7, r19	; 0x07
 470:	2e 83       	std	Y+6, r18	; 0x06
 472:	8e 81       	ldd	r24, Y+6	; 0x06
 474:	9f 81       	ldd	r25, Y+7	; 0x07
 476:	00 97       	sbiw	r24, 0x00	; 0
 478:	c9 f0       	breq	.+50     	; 0x4ac <GPIO_writePin+0x196>
 47a:	2e 81       	ldd	r18, Y+6	; 0x06
 47c:	3f 81       	ldd	r19, Y+7	; 0x07
 47e:	21 30       	cpi	r18, 0x01	; 1
 480:	31 05       	cpc	r19, r1
 482:	49 f5       	brne	.+82     	; 0x4d6 <GPIO_writePin+0x1c0>
			case GPIO_HIGH:
				SET_BIT(PORTC, pin);
 484:	a5 e3       	ldi	r26, 0x35	; 53
 486:	b0 e0       	ldi	r27, 0x00	; 0
 488:	e5 e3       	ldi	r30, 0x35	; 53
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	48 2f       	mov	r20, r24
 490:	8a 81       	ldd	r24, Y+2	; 0x02
 492:	28 2f       	mov	r18, r24
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	02 2e       	mov	r0, r18
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <GPIO_writePin+0x18c>
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	0a 94       	dec	r0
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <GPIO_writePin+0x188>
 4a6:	84 2b       	or	r24, r20
 4a8:	8c 93       	st	X, r24
 4aa:	52 c0       	rjmp	.+164    	; 0x550 <GPIO_writePin+0x23a>
				break;
			case GPIO_LOW:
				CLEAR_BIT(PORTC, pin);
 4ac:	a5 e3       	ldi	r26, 0x35	; 53
 4ae:	b0 e0       	ldi	r27, 0x00	; 0
 4b0:	e5 e3       	ldi	r30, 0x35	; 53
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	48 2f       	mov	r20, r24
 4b8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ba:	28 2f       	mov	r18, r24
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	02 2e       	mov	r0, r18
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <GPIO_writePin+0x1b4>
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	0a 94       	dec	r0
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <GPIO_writePin+0x1b0>
 4ce:	80 95       	com	r24
 4d0:	84 23       	and	r24, r20
 4d2:	8c 93       	st	X, r24
 4d4:	3d c0       	rjmp	.+122    	; 0x550 <GPIO_writePin+0x23a>
				break;
			default:
				return E_NOK;
 4d6:	31 e0       	ldi	r19, 0x01	; 1
 4d8:	3e 87       	std	Y+14, r19	; 0x0e
 4da:	3b c0       	rjmp	.+118    	; 0x552 <GPIO_writePin+0x23c>
			}
			break;
		case GPIO_PORTD:
			switch (state) {
 4dc:	8b 81       	ldd	r24, Y+3	; 0x03
 4de:	28 2f       	mov	r18, r24
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	3d 83       	std	Y+5, r19	; 0x05
 4e4:	2c 83       	std	Y+4, r18	; 0x04
 4e6:	8c 81       	ldd	r24, Y+4	; 0x04
 4e8:	9d 81       	ldd	r25, Y+5	; 0x05
 4ea:	00 97       	sbiw	r24, 0x00	; 0
 4ec:	c9 f0       	breq	.+50     	; 0x520 <GPIO_writePin+0x20a>
 4ee:	2c 81       	ldd	r18, Y+4	; 0x04
 4f0:	3d 81       	ldd	r19, Y+5	; 0x05
 4f2:	21 30       	cpi	r18, 0x01	; 1
 4f4:	31 05       	cpc	r19, r1
 4f6:	49 f5       	brne	.+82     	; 0x54a <GPIO_writePin+0x234>
			case GPIO_HIGH:
				SET_BIT(PORTD, pin);
 4f8:	a2 e3       	ldi	r26, 0x32	; 50
 4fa:	b0 e0       	ldi	r27, 0x00	; 0
 4fc:	e2 e3       	ldi	r30, 0x32	; 50
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	80 81       	ld	r24, Z
 502:	48 2f       	mov	r20, r24
 504:	8a 81       	ldd	r24, Y+2	; 0x02
 506:	28 2f       	mov	r18, r24
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	02 2e       	mov	r0, r18
 510:	02 c0       	rjmp	.+4      	; 0x516 <GPIO_writePin+0x200>
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	0a 94       	dec	r0
 518:	e2 f7       	brpl	.-8      	; 0x512 <GPIO_writePin+0x1fc>
 51a:	84 2b       	or	r24, r20
 51c:	8c 93       	st	X, r24
 51e:	18 c0       	rjmp	.+48     	; 0x550 <GPIO_writePin+0x23a>
				break;
			case GPIO_LOW:
				CLEAR_BIT(PORTD, pin);
 520:	a2 e3       	ldi	r26, 0x32	; 50
 522:	b0 e0       	ldi	r27, 0x00	; 0
 524:	e2 e3       	ldi	r30, 0x32	; 50
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	80 81       	ld	r24, Z
 52a:	48 2f       	mov	r20, r24
 52c:	8a 81       	ldd	r24, Y+2	; 0x02
 52e:	28 2f       	mov	r18, r24
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	02 2e       	mov	r0, r18
 538:	02 c0       	rjmp	.+4      	; 0x53e <GPIO_writePin+0x228>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	0a 94       	dec	r0
 540:	e2 f7       	brpl	.-8      	; 0x53a <GPIO_writePin+0x224>
 542:	80 95       	com	r24
 544:	84 23       	and	r24, r20
 546:	8c 93       	st	X, r24
 548:	03 c0       	rjmp	.+6      	; 0x550 <GPIO_writePin+0x23a>
				break;
			default:
				return E_NOK;
 54a:	31 e0       	ldi	r19, 0x01	; 1
 54c:	3e 87       	std	Y+14, r19	; 0x0e
 54e:	01 c0       	rjmp	.+2      	; 0x552 <GPIO_writePin+0x23c>
			break;

		}
	}

	return E_OK;
 550:	1e 86       	std	Y+14, r1	; 0x0e
 552:	8e 85       	ldd	r24, Y+14	; 0x0e
}
 554:	2e 96       	adiw	r28, 0x0e	; 14
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	f8 94       	cli
 55a:	de bf       	out	0x3e, r29	; 62
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	cd bf       	out	0x3d, r28	; 61
 560:	cf 91       	pop	r28
 562:	df 91       	pop	r29
 564:	08 95       	ret

00000566 <GPIO_togglePin>:
 * 			pin		-Pin number
 * Output:  No output
 * return:	StdReturn	-return the API status
 * prerequisites:	pin direction to be set output
 */
StdReturn GPIO_togglePin(GPIO_port port, uint8 pin) {
 566:	df 93       	push	r29
 568:	cf 93       	push	r28
 56a:	00 d0       	rcall	.+0      	; 0x56c <GPIO_togglePin+0x6>
 56c:	00 d0       	rcall	.+0      	; 0x56e <GPIO_togglePin+0x8>
 56e:	0f 92       	push	r0
 570:	cd b7       	in	r28, 0x3d	; 61
 572:	de b7       	in	r29, 0x3e	; 62
 574:	89 83       	std	Y+1, r24	; 0x01
 576:	6a 83       	std	Y+2, r22	; 0x02
	if (pin > MAX_PIN_NUMBER) {
 578:	8a 81       	ldd	r24, Y+2	; 0x02
 57a:	88 30       	cpi	r24, 0x08	; 8
 57c:	18 f0       	brcs	.+6      	; 0x584 <GPIO_togglePin+0x1e>
		return E_NOK;
 57e:	21 e0       	ldi	r18, 0x01	; 1
 580:	2d 83       	std	Y+5, r18	; 0x05
 582:	73 c0       	rjmp	.+230    	; 0x66a <GPIO_togglePin+0x104>
	} else {
		switch (port) {
 584:	89 81       	ldd	r24, Y+1	; 0x01
 586:	28 2f       	mov	r18, r24
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	3c 83       	std	Y+4, r19	; 0x04
 58c:	2b 83       	std	Y+3, r18	; 0x03
 58e:	8b 81       	ldd	r24, Y+3	; 0x03
 590:	9c 81       	ldd	r25, Y+4	; 0x04
 592:	81 30       	cpi	r24, 0x01	; 1
 594:	91 05       	cpc	r25, r1
 596:	49 f1       	breq	.+82     	; 0x5ea <GPIO_togglePin+0x84>
 598:	2b 81       	ldd	r18, Y+3	; 0x03
 59a:	3c 81       	ldd	r19, Y+4	; 0x04
 59c:	22 30       	cpi	r18, 0x02	; 2
 59e:	31 05       	cpc	r19, r1
 5a0:	2c f4       	brge	.+10     	; 0x5ac <GPIO_togglePin+0x46>
 5a2:	8b 81       	ldd	r24, Y+3	; 0x03
 5a4:	9c 81       	ldd	r25, Y+4	; 0x04
 5a6:	00 97       	sbiw	r24, 0x00	; 0
 5a8:	61 f0       	breq	.+24     	; 0x5c2 <GPIO_togglePin+0x5c>
 5aa:	5b c0       	rjmp	.+182    	; 0x662 <GPIO_togglePin+0xfc>
 5ac:	2b 81       	ldd	r18, Y+3	; 0x03
 5ae:	3c 81       	ldd	r19, Y+4	; 0x04
 5b0:	22 30       	cpi	r18, 0x02	; 2
 5b2:	31 05       	cpc	r19, r1
 5b4:	71 f1       	breq	.+92     	; 0x612 <GPIO_togglePin+0xac>
 5b6:	8b 81       	ldd	r24, Y+3	; 0x03
 5b8:	9c 81       	ldd	r25, Y+4	; 0x04
 5ba:	83 30       	cpi	r24, 0x03	; 3
 5bc:	91 05       	cpc	r25, r1
 5be:	e9 f1       	breq	.+122    	; 0x63a <GPIO_togglePin+0xd4>
 5c0:	50 c0       	rjmp	.+160    	; 0x662 <GPIO_togglePin+0xfc>
		case GPIO_PORTA:
			TOGGLE_BIT(PORTA, pin);
 5c2:	ab e3       	ldi	r26, 0x3B	; 59
 5c4:	b0 e0       	ldi	r27, 0x00	; 0
 5c6:	eb e3       	ldi	r30, 0x3B	; 59
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	48 2f       	mov	r20, r24
 5ce:	8a 81       	ldd	r24, Y+2	; 0x02
 5d0:	28 2f       	mov	r18, r24
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	02 2e       	mov	r0, r18
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <GPIO_togglePin+0x7a>
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	0a 94       	dec	r0
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <GPIO_togglePin+0x76>
 5e4:	84 27       	eor	r24, r20
 5e6:	8c 93       	st	X, r24
 5e8:	3f c0       	rjmp	.+126    	; 0x668 <GPIO_togglePin+0x102>
			break;
		case GPIO_PORTB:
			TOGGLE_BIT(PORTB, pin);
 5ea:	a8 e3       	ldi	r26, 0x38	; 56
 5ec:	b0 e0       	ldi	r27, 0x00	; 0
 5ee:	e8 e3       	ldi	r30, 0x38	; 56
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	80 81       	ld	r24, Z
 5f4:	48 2f       	mov	r20, r24
 5f6:	8a 81       	ldd	r24, Y+2	; 0x02
 5f8:	28 2f       	mov	r18, r24
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 2e       	mov	r0, r18
 602:	02 c0       	rjmp	.+4      	; 0x608 <GPIO_togglePin+0xa2>
 604:	88 0f       	add	r24, r24
 606:	99 1f       	adc	r25, r25
 608:	0a 94       	dec	r0
 60a:	e2 f7       	brpl	.-8      	; 0x604 <GPIO_togglePin+0x9e>
 60c:	84 27       	eor	r24, r20
 60e:	8c 93       	st	X, r24
 610:	2b c0       	rjmp	.+86     	; 0x668 <GPIO_togglePin+0x102>
			break;
		case GPIO_PORTC:
			TOGGLE_BIT(PORTC, pin);
 612:	a5 e3       	ldi	r26, 0x35	; 53
 614:	b0 e0       	ldi	r27, 0x00	; 0
 616:	e5 e3       	ldi	r30, 0x35	; 53
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	48 2f       	mov	r20, r24
 61e:	8a 81       	ldd	r24, Y+2	; 0x02
 620:	28 2f       	mov	r18, r24
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	02 2e       	mov	r0, r18
 62a:	02 c0       	rjmp	.+4      	; 0x630 <GPIO_togglePin+0xca>
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	0a 94       	dec	r0
 632:	e2 f7       	brpl	.-8      	; 0x62c <GPIO_togglePin+0xc6>
 634:	84 27       	eor	r24, r20
 636:	8c 93       	st	X, r24
 638:	17 c0       	rjmp	.+46     	; 0x668 <GPIO_togglePin+0x102>
			break;
		case GPIO_PORTD:
			TOGGLE_BIT(PORTD, pin);
 63a:	a2 e3       	ldi	r26, 0x32	; 50
 63c:	b0 e0       	ldi	r27, 0x00	; 0
 63e:	e2 e3       	ldi	r30, 0x32	; 50
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	80 81       	ld	r24, Z
 644:	48 2f       	mov	r20, r24
 646:	8a 81       	ldd	r24, Y+2	; 0x02
 648:	28 2f       	mov	r18, r24
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	02 2e       	mov	r0, r18
 652:	02 c0       	rjmp	.+4      	; 0x658 <GPIO_togglePin+0xf2>
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	0a 94       	dec	r0
 65a:	e2 f7       	brpl	.-8      	; 0x654 <GPIO_togglePin+0xee>
 65c:	84 27       	eor	r24, r20
 65e:	8c 93       	st	X, r24
 660:	03 c0       	rjmp	.+6      	; 0x668 <GPIO_togglePin+0x102>
			break;
		default:
			return E_NOK;
 662:	91 e0       	ldi	r25, 0x01	; 1
 664:	9d 83       	std	Y+5, r25	; 0x05
 666:	01 c0       	rjmp	.+2      	; 0x66a <GPIO_togglePin+0x104>
		}
	}

	return E_OK;
 668:	1d 82       	std	Y+5, r1	; 0x05
 66a:	8d 81       	ldd	r24, Y+5	; 0x05
}
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	0f 90       	pop	r0
 672:	0f 90       	pop	r0
 674:	0f 90       	pop	r0
 676:	cf 91       	pop	r28
 678:	df 91       	pop	r29
 67a:	08 95       	ret

0000067c <GPIO_readPin>:
 * 			pin		-Pin number
 * Output:  *state	-Pin state whether high or low
 * return:	StdReturn	-return the API status
 * prerequisites:	pin direction to be set INPUT
 */
StdReturn GPIO_readPin(GPIO_port port, uint8 pin, GPIO_pinState *state) {
 67c:	df 93       	push	r29
 67e:	cf 93       	push	r28
 680:	cd b7       	in	r28, 0x3d	; 61
 682:	de b7       	in	r29, 0x3e	; 62
 684:	27 97       	sbiw	r28, 0x07	; 7
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	f8 94       	cli
 68a:	de bf       	out	0x3e, r29	; 62
 68c:	0f be       	out	0x3f, r0	; 63
 68e:	cd bf       	out	0x3d, r28	; 61
 690:	89 83       	std	Y+1, r24	; 0x01
 692:	6a 83       	std	Y+2, r22	; 0x02
 694:	5c 83       	std	Y+4, r21	; 0x04
 696:	4b 83       	std	Y+3, r20	; 0x03

	// complete this function as we discussed
	//StdReturn GPIO_setPinDirection(port, pin, *state);
	if (pin > MAX_PIN_NUMBER) {
 698:	8a 81       	ldd	r24, Y+2	; 0x02
 69a:	88 30       	cpi	r24, 0x08	; 8
 69c:	18 f0       	brcs	.+6      	; 0x6a4 <GPIO_readPin+0x28>
			return E_NOK;
 69e:	21 e0       	ldi	r18, 0x01	; 1
 6a0:	2f 83       	std	Y+7, r18	; 0x07
 6a2:	78 c0       	rjmp	.+240    	; 0x794 <GPIO_readPin+0x118>
		}else
			{
			switch(port){
 6a4:	89 81       	ldd	r24, Y+1	; 0x01
 6a6:	48 2f       	mov	r20, r24
 6a8:	50 e0       	ldi	r21, 0x00	; 0
 6aa:	5e 83       	std	Y+6, r21	; 0x06
 6ac:	4d 83       	std	Y+5, r20	; 0x05
 6ae:	8d 81       	ldd	r24, Y+5	; 0x05
 6b0:	9e 81       	ldd	r25, Y+6	; 0x06
 6b2:	81 30       	cpi	r24, 0x01	; 1
 6b4:	91 05       	cpc	r25, r1
 6b6:	59 f1       	breq	.+86     	; 0x70e <GPIO_readPin+0x92>
 6b8:	2d 81       	ldd	r18, Y+5	; 0x05
 6ba:	3e 81       	ldd	r19, Y+6	; 0x06
 6bc:	22 30       	cpi	r18, 0x02	; 2
 6be:	31 05       	cpc	r19, r1
 6c0:	34 f4       	brge	.+12     	; 0x6ce <GPIO_readPin+0x52>
 6c2:	4d 81       	ldd	r20, Y+5	; 0x05
 6c4:	5e 81       	ldd	r21, Y+6	; 0x06
 6c6:	41 15       	cp	r20, r1
 6c8:	51 05       	cpc	r21, r1
 6ca:	69 f0       	breq	.+26     	; 0x6e6 <GPIO_readPin+0x6a>
 6cc:	5c c0       	rjmp	.+184    	; 0x786 <GPIO_readPin+0x10a>
 6ce:	8d 81       	ldd	r24, Y+5	; 0x05
 6d0:	9e 81       	ldd	r25, Y+6	; 0x06
 6d2:	82 30       	cpi	r24, 0x02	; 2
 6d4:	91 05       	cpc	r25, r1
 6d6:	79 f1       	breq	.+94     	; 0x736 <GPIO_readPin+0xba>
 6d8:	2d 81       	ldd	r18, Y+5	; 0x05
 6da:	3e 81       	ldd	r19, Y+6	; 0x06
 6dc:	23 30       	cpi	r18, 0x03	; 3
 6de:	31 05       	cpc	r19, r1
 6e0:	09 f4       	brne	.+2      	; 0x6e4 <GPIO_readPin+0x68>
 6e2:	3d c0       	rjmp	.+122    	; 0x75e <GPIO_readPin+0xe2>
 6e4:	50 c0       	rjmp	.+160    	; 0x786 <GPIO_readPin+0x10a>
			case GPIO_PORTA:
						*state = GET_BIT(PORTA, pin);
 6e6:	eb e3       	ldi	r30, 0x3B	; 59
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	80 81       	ld	r24, Z
 6ec:	28 2f       	mov	r18, r24
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	8a 81       	ldd	r24, Y+2	; 0x02
 6f2:	88 2f       	mov	r24, r24
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	a9 01       	movw	r20, r18
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <GPIO_readPin+0x82>
 6fa:	55 95       	asr	r21
 6fc:	47 95       	ror	r20
 6fe:	8a 95       	dec	r24
 700:	e2 f7       	brpl	.-8      	; 0x6fa <GPIO_readPin+0x7e>
 702:	ca 01       	movw	r24, r20
 704:	81 70       	andi	r24, 0x01	; 1
 706:	eb 81       	ldd	r30, Y+3	; 0x03
 708:	fc 81       	ldd	r31, Y+4	; 0x04
 70a:	80 83       	st	Z, r24
 70c:	3f c0       	rjmp	.+126    	; 0x78c <GPIO_readPin+0x110>
						break;
					case GPIO_PORTB:
						*state = GET_BIT(PORTB, pin);
 70e:	e8 e3       	ldi	r30, 0x38	; 56
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	80 81       	ld	r24, Z
 714:	28 2f       	mov	r18, r24
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	8a 81       	ldd	r24, Y+2	; 0x02
 71a:	88 2f       	mov	r24, r24
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	a9 01       	movw	r20, r18
 720:	02 c0       	rjmp	.+4      	; 0x726 <GPIO_readPin+0xaa>
 722:	55 95       	asr	r21
 724:	47 95       	ror	r20
 726:	8a 95       	dec	r24
 728:	e2 f7       	brpl	.-8      	; 0x722 <GPIO_readPin+0xa6>
 72a:	ca 01       	movw	r24, r20
 72c:	81 70       	andi	r24, 0x01	; 1
 72e:	eb 81       	ldd	r30, Y+3	; 0x03
 730:	fc 81       	ldd	r31, Y+4	; 0x04
 732:	80 83       	st	Z, r24
 734:	2b c0       	rjmp	.+86     	; 0x78c <GPIO_readPin+0x110>
						break;
					case GPIO_PORTC:
						*state = GET_BIT(PORTC, pin);
 736:	e5 e3       	ldi	r30, 0x35	; 53
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	80 81       	ld	r24, Z
 73c:	28 2f       	mov	r18, r24
 73e:	30 e0       	ldi	r19, 0x00	; 0
 740:	8a 81       	ldd	r24, Y+2	; 0x02
 742:	88 2f       	mov	r24, r24
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	a9 01       	movw	r20, r18
 748:	02 c0       	rjmp	.+4      	; 0x74e <GPIO_readPin+0xd2>
 74a:	55 95       	asr	r21
 74c:	47 95       	ror	r20
 74e:	8a 95       	dec	r24
 750:	e2 f7       	brpl	.-8      	; 0x74a <GPIO_readPin+0xce>
 752:	ca 01       	movw	r24, r20
 754:	81 70       	andi	r24, 0x01	; 1
 756:	eb 81       	ldd	r30, Y+3	; 0x03
 758:	fc 81       	ldd	r31, Y+4	; 0x04
 75a:	80 83       	st	Z, r24
 75c:	17 c0       	rjmp	.+46     	; 0x78c <GPIO_readPin+0x110>
						break;
					case GPIO_PORTD:
						*state = GET_BIT(PORTD, pin);
 75e:	e2 e3       	ldi	r30, 0x32	; 50
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	80 81       	ld	r24, Z
 764:	28 2f       	mov	r18, r24
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	8a 81       	ldd	r24, Y+2	; 0x02
 76a:	88 2f       	mov	r24, r24
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	a9 01       	movw	r20, r18
 770:	02 c0       	rjmp	.+4      	; 0x776 <GPIO_readPin+0xfa>
 772:	55 95       	asr	r21
 774:	47 95       	ror	r20
 776:	8a 95       	dec	r24
 778:	e2 f7       	brpl	.-8      	; 0x772 <GPIO_readPin+0xf6>
 77a:	ca 01       	movw	r24, r20
 77c:	81 70       	andi	r24, 0x01	; 1
 77e:	eb 81       	ldd	r30, Y+3	; 0x03
 780:	fc 81       	ldd	r31, Y+4	; 0x04
 782:	80 83       	st	Z, r24
 784:	03 c0       	rjmp	.+6      	; 0x78c <GPIO_readPin+0x110>
						break;
					default:
						return E_NOK;
 786:	51 e0       	ldi	r21, 0x01	; 1
 788:	5f 83       	std	Y+7, r21	; 0x07
 78a:	04 c0       	rjmp	.+8      	; 0x794 <GPIO_readPin+0x118>
						}
			return *state;
 78c:	eb 81       	ldd	r30, Y+3	; 0x03
 78e:	fc 81       	ldd	r31, Y+4	; 0x04
 790:	80 81       	ld	r24, Z
 792:	8f 83       	std	Y+7, r24	; 0x07
 794:	8f 81       	ldd	r24, Y+7	; 0x07
			}
}
 796:	27 96       	adiw	r28, 0x07	; 7
 798:	0f b6       	in	r0, 0x3f	; 63
 79a:	f8 94       	cli
 79c:	de bf       	out	0x3e, r29	; 62
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	cd bf       	out	0x3d, r28	; 61
 7a2:	cf 91       	pop	r28
 7a4:	df 91       	pop	r29
 7a6:	08 95       	ret

000007a8 <GPIO_enablePullup>:
 * 			state	-Required state (enabled - Disabled)
 * Output:  No output
 * return:	StdReturn	-return the API status
 * prerequisites:	pin direction to be set INPUT
 */
StdReturn GPIO_enablePullup(GPIO_port port, uint8 pin, GPIO_pullupEnable state) {
 7a8:	df 93       	push	r29
 7aa:	cf 93       	push	r28
 7ac:	00 d0       	rcall	.+0      	; 0x7ae <GPIO_enablePullup+0x6>
 7ae:	00 d0       	rcall	.+0      	; 0x7b0 <GPIO_enablePullup+0x8>
 7b0:	00 d0       	rcall	.+0      	; 0x7b2 <GPIO_enablePullup+0xa>
 7b2:	cd b7       	in	r28, 0x3d	; 61
 7b4:	de b7       	in	r29, 0x3e	; 62
 7b6:	89 83       	std	Y+1, r24	; 0x01
 7b8:	6a 83       	std	Y+2, r22	; 0x02
 7ba:	4b 83       	std	Y+3, r20	; 0x03

// complete this function as we discussed
	if (pin > MAX_PIN_NUMBER) {
 7bc:	8a 81       	ldd	r24, Y+2	; 0x02
 7be:	88 30       	cpi	r24, 0x08	; 8
 7c0:	18 f0       	brcs	.+6      	; 0x7c8 <GPIO_enablePullup+0x20>
				return E_NOK;
 7c2:	21 e0       	ldi	r18, 0x01	; 1
 7c4:	2e 83       	std	Y+6, r18	; 0x06
 7c6:	37 c0       	rjmp	.+110    	; 0x836 <GPIO_enablePullup+0x8e>
			}else
				{
				switch(port)
 7c8:	89 81       	ldd	r24, Y+1	; 0x01
 7ca:	28 2f       	mov	r18, r24
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	3d 83       	std	Y+5, r19	; 0x05
 7d0:	2c 83       	std	Y+4, r18	; 0x04
 7d2:	8c 81       	ldd	r24, Y+4	; 0x04
 7d4:	9d 81       	ldd	r25, Y+5	; 0x05
 7d6:	81 30       	cpi	r24, 0x01	; 1
 7d8:	91 05       	cpc	r25, r1
 7da:	d1 f0       	breq	.+52     	; 0x810 <GPIO_enablePullup+0x68>
 7dc:	2c 81       	ldd	r18, Y+4	; 0x04
 7de:	3d 81       	ldd	r19, Y+5	; 0x05
 7e0:	22 30       	cpi	r18, 0x02	; 2
 7e2:	31 05       	cpc	r19, r1
 7e4:	2c f4       	brge	.+10     	; 0x7f0 <GPIO_enablePullup+0x48>
 7e6:	8c 81       	ldd	r24, Y+4	; 0x04
 7e8:	9d 81       	ldd	r25, Y+5	; 0x05
 7ea:	00 97       	sbiw	r24, 0x00	; 0
 7ec:	61 f0       	breq	.+24     	; 0x806 <GPIO_enablePullup+0x5e>
 7ee:	1f c0       	rjmp	.+62     	; 0x82e <GPIO_enablePullup+0x86>
 7f0:	2c 81       	ldd	r18, Y+4	; 0x04
 7f2:	3d 81       	ldd	r19, Y+5	; 0x05
 7f4:	22 30       	cpi	r18, 0x02	; 2
 7f6:	31 05       	cpc	r19, r1
 7f8:	81 f0       	breq	.+32     	; 0x81a <GPIO_enablePullup+0x72>
 7fa:	8c 81       	ldd	r24, Y+4	; 0x04
 7fc:	9d 81       	ldd	r25, Y+5	; 0x05
 7fe:	83 30       	cpi	r24, 0x03	; 3
 800:	91 05       	cpc	r25, r1
 802:	81 f0       	breq	.+32     	; 0x824 <GPIO_enablePullup+0x7c>
 804:	14 c0       	rjmp	.+40     	; 0x82e <GPIO_enablePullup+0x86>
					{
					case GPIO_PORTA:
						PORTA = 0xFF;
 806:	eb e3       	ldi	r30, 0x3B	; 59
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	8f ef       	ldi	r24, 0xFF	; 255
 80c:	80 83       	st	Z, r24
 80e:	12 c0       	rjmp	.+36     	; 0x834 <GPIO_enablePullup+0x8c>
						break;
					case GPIO_PORTB:
						PORTB = 0xFF;
 810:	e8 e3       	ldi	r30, 0x38	; 56
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	8f ef       	ldi	r24, 0xFF	; 255
 816:	80 83       	st	Z, r24
 818:	0d c0       	rjmp	.+26     	; 0x834 <GPIO_enablePullup+0x8c>
						break;
					case GPIO_PORTC:
						PORTC = 0xFF;
 81a:	e5 e3       	ldi	r30, 0x35	; 53
 81c:	f0 e0       	ldi	r31, 0x00	; 0
 81e:	8f ef       	ldi	r24, 0xFF	; 255
 820:	80 83       	st	Z, r24
 822:	08 c0       	rjmp	.+16     	; 0x834 <GPIO_enablePullup+0x8c>
						break;
					case GPIO_PORTD:
						PORTD = 0xFF;
 824:	e2 e3       	ldi	r30, 0x32	; 50
 826:	f0 e0       	ldi	r31, 0x00	; 0
 828:	8f ef       	ldi	r24, 0xFF	; 255
 82a:	80 83       	st	Z, r24
 82c:	03 c0       	rjmp	.+6      	; 0x834 <GPIO_enablePullup+0x8c>
						break;
					default:
						return E_NOK;
 82e:	91 e0       	ldi	r25, 0x01	; 1
 830:	9e 83       	std	Y+6, r25	; 0x06
 832:	01 c0       	rjmp	.+2      	; 0x836 <GPIO_enablePullup+0x8e>
					}
					return E_OK;
 834:	1e 82       	std	Y+6, r1	; 0x06
 836:	8e 81       	ldd	r24, Y+6	; 0x06
						}
}
 838:	26 96       	adiw	r28, 0x06	; 6
 83a:	0f b6       	in	r0, 0x3f	; 63
 83c:	f8 94       	cli
 83e:	de bf       	out	0x3e, r29	; 62
 840:	0f be       	out	0x3f, r0	; 63
 842:	cd bf       	out	0x3d, r28	; 61
 844:	cf 91       	pop	r28
 846:	df 91       	pop	r29
 848:	08 95       	ret

0000084a <main>:
#define Display_6		0b00000010
#define Display_7		0b01111000
#define Display_8		0b00000000
#define Display_9		0b00010000

int main(){
 84a:	df 93       	push	r29
 84c:	cf 93       	push	r28
 84e:	00 d0       	rcall	.+0      	; 0x850 <main+0x6>
 850:	00 d0       	rcall	.+0      	; 0x852 <main+0x8>
 852:	cd b7       	in	r28, 0x3d	; 61
 854:	de b7       	in	r29, 0x3e	; 62

	DDRA = 0XFF;
 856:	ea e3       	ldi	r30, 0x3A	; 58
 858:	f0 e0       	ldi	r31, 0x00	; 0
 85a:	8f ef       	ldi	r24, 0xFF	; 255
 85c:	80 83       	st	Z, r24

	while(1){

		for (int i = 0; i < 10; i++){
 85e:	1a 82       	std	Y+2, r1	; 0x02
 860:	19 82       	std	Y+1, r1	; 0x01
 862:	80 c0       	rjmp	.+256    	; 0x964 <__stack+0x105>

			switch(i){
 864:	89 81       	ldd	r24, Y+1	; 0x01
 866:	9a 81       	ldd	r25, Y+2	; 0x02
 868:	9c 83       	std	Y+4, r25	; 0x04
 86a:	8b 83       	std	Y+3, r24	; 0x03
 86c:	8b 81       	ldd	r24, Y+3	; 0x03
 86e:	9c 81       	ldd	r25, Y+4	; 0x04
 870:	84 30       	cpi	r24, 0x04	; 4
 872:	91 05       	cpc	r25, r1
 874:	09 f4       	brne	.+2      	; 0x878 <__stack+0x19>
 876:	55 c0       	rjmp	.+170    	; 0x922 <__stack+0xc3>
 878:	8b 81       	ldd	r24, Y+3	; 0x03
 87a:	9c 81       	ldd	r25, Y+4	; 0x04
 87c:	85 30       	cpi	r24, 0x05	; 5
 87e:	91 05       	cpc	r25, r1
 880:	dc f4       	brge	.+54     	; 0x8b8 <__stack+0x59>
 882:	8b 81       	ldd	r24, Y+3	; 0x03
 884:	9c 81       	ldd	r25, Y+4	; 0x04
 886:	81 30       	cpi	r24, 0x01	; 1
 888:	91 05       	cpc	r25, r1
 88a:	09 f4       	brne	.+2      	; 0x88e <__stack+0x2f>
 88c:	3b c0       	rjmp	.+118    	; 0x904 <__stack+0xa5>
 88e:	8b 81       	ldd	r24, Y+3	; 0x03
 890:	9c 81       	ldd	r25, Y+4	; 0x04
 892:	82 30       	cpi	r24, 0x02	; 2
 894:	91 05       	cpc	r25, r1
 896:	2c f4       	brge	.+10     	; 0x8a2 <__stack+0x43>
 898:	8b 81       	ldd	r24, Y+3	; 0x03
 89a:	9c 81       	ldd	r25, Y+4	; 0x04
 89c:	00 97       	sbiw	r24, 0x00	; 0
 89e:	69 f1       	breq	.+90     	; 0x8fa <__stack+0x9b>
 8a0:	5c c0       	rjmp	.+184    	; 0x95a <__stack+0xfb>
 8a2:	8b 81       	ldd	r24, Y+3	; 0x03
 8a4:	9c 81       	ldd	r25, Y+4	; 0x04
 8a6:	82 30       	cpi	r24, 0x02	; 2
 8a8:	91 05       	cpc	r25, r1
 8aa:	89 f1       	breq	.+98     	; 0x90e <__stack+0xaf>
 8ac:	8b 81       	ldd	r24, Y+3	; 0x03
 8ae:	9c 81       	ldd	r25, Y+4	; 0x04
 8b0:	83 30       	cpi	r24, 0x03	; 3
 8b2:	91 05       	cpc	r25, r1
 8b4:	89 f1       	breq	.+98     	; 0x918 <__stack+0xb9>
 8b6:	51 c0       	rjmp	.+162    	; 0x95a <__stack+0xfb>
 8b8:	8b 81       	ldd	r24, Y+3	; 0x03
 8ba:	9c 81       	ldd	r25, Y+4	; 0x04
 8bc:	87 30       	cpi	r24, 0x07	; 7
 8be:	91 05       	cpc	r25, r1
 8c0:	09 f4       	brne	.+2      	; 0x8c4 <__stack+0x65>
 8c2:	3e c0       	rjmp	.+124    	; 0x940 <__stack+0xe1>
 8c4:	8b 81       	ldd	r24, Y+3	; 0x03
 8c6:	9c 81       	ldd	r25, Y+4	; 0x04
 8c8:	88 30       	cpi	r24, 0x08	; 8
 8ca:	91 05       	cpc	r25, r1
 8cc:	5c f4       	brge	.+22     	; 0x8e4 <__stack+0x85>
 8ce:	8b 81       	ldd	r24, Y+3	; 0x03
 8d0:	9c 81       	ldd	r25, Y+4	; 0x04
 8d2:	85 30       	cpi	r24, 0x05	; 5
 8d4:	91 05       	cpc	r25, r1
 8d6:	51 f1       	breq	.+84     	; 0x92c <__stack+0xcd>
 8d8:	8b 81       	ldd	r24, Y+3	; 0x03
 8da:	9c 81       	ldd	r25, Y+4	; 0x04
 8dc:	86 30       	cpi	r24, 0x06	; 6
 8de:	91 05       	cpc	r25, r1
 8e0:	51 f1       	breq	.+84     	; 0x936 <__stack+0xd7>
 8e2:	3b c0       	rjmp	.+118    	; 0x95a <__stack+0xfb>
 8e4:	8b 81       	ldd	r24, Y+3	; 0x03
 8e6:	9c 81       	ldd	r25, Y+4	; 0x04
 8e8:	88 30       	cpi	r24, 0x08	; 8
 8ea:	91 05       	cpc	r25, r1
 8ec:	71 f1       	breq	.+92     	; 0x94a <__stack+0xeb>
 8ee:	8b 81       	ldd	r24, Y+3	; 0x03
 8f0:	9c 81       	ldd	r25, Y+4	; 0x04
 8f2:	89 30       	cpi	r24, 0x09	; 9
 8f4:	91 05       	cpc	r25, r1
 8f6:	69 f1       	breq	.+90     	; 0x952 <__stack+0xf3>
 8f8:	30 c0       	rjmp	.+96     	; 0x95a <__stack+0xfb>

			case Disp_0:
				PORTA = Display_0;
 8fa:	eb e3       	ldi	r30, 0x3B	; 59
 8fc:	f0 e0       	ldi	r31, 0x00	; 0
 8fe:	8f e3       	ldi	r24, 0x3F	; 63
 900:	80 83       	st	Z, r24
 902:	2b c0       	rjmp	.+86     	; 0x95a <__stack+0xfb>
				break;

			case Disp_1:
				PORTA = Display_1;
 904:	eb e3       	ldi	r30, 0x3B	; 59
 906:	f0 e0       	ldi	r31, 0x00	; 0
 908:	89 e7       	ldi	r24, 0x79	; 121
 90a:	80 83       	st	Z, r24
 90c:	26 c0       	rjmp	.+76     	; 0x95a <__stack+0xfb>
				break;

			case Disp_2:
				PORTA = Display_2;
 90e:	eb e3       	ldi	r30, 0x3B	; 59
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	84 e2       	ldi	r24, 0x24	; 36
 914:	80 83       	st	Z, r24
 916:	21 c0       	rjmp	.+66     	; 0x95a <__stack+0xfb>
				break;

			case Disp_3:
				PORTA = Display_3;
 918:	eb e3       	ldi	r30, 0x3B	; 59
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	80 e3       	ldi	r24, 0x30	; 48
 91e:	80 83       	st	Z, r24
 920:	1c c0       	rjmp	.+56     	; 0x95a <__stack+0xfb>
				break;

			case Disp_4:
				PORTA = Display_4;
 922:	eb e3       	ldi	r30, 0x3B	; 59
 924:	f0 e0       	ldi	r31, 0x00	; 0
 926:	89 e1       	ldi	r24, 0x19	; 25
 928:	80 83       	st	Z, r24
 92a:	17 c0       	rjmp	.+46     	; 0x95a <__stack+0xfb>
				break;

			case Disp_5:
				PORTA = Display_5;
 92c:	eb e3       	ldi	r30, 0x3B	; 59
 92e:	f0 e0       	ldi	r31, 0x00	; 0
 930:	82 e1       	ldi	r24, 0x12	; 18
 932:	80 83       	st	Z, r24
 934:	12 c0       	rjmp	.+36     	; 0x95a <__stack+0xfb>
				break;

			case Disp_6:
				PORTA = Display_6;
 936:	eb e3       	ldi	r30, 0x3B	; 59
 938:	f0 e0       	ldi	r31, 0x00	; 0
 93a:	82 e0       	ldi	r24, 0x02	; 2
 93c:	80 83       	st	Z, r24
 93e:	0d c0       	rjmp	.+26     	; 0x95a <__stack+0xfb>
				break;

			case Disp_7:
				PORTA = Display_7;
 940:	eb e3       	ldi	r30, 0x3B	; 59
 942:	f0 e0       	ldi	r31, 0x00	; 0
 944:	88 e7       	ldi	r24, 0x78	; 120
 946:	80 83       	st	Z, r24
 948:	08 c0       	rjmp	.+16     	; 0x95a <__stack+0xfb>
				break;

			case Disp_8:
				PORTA = Display_8;
 94a:	eb e3       	ldi	r30, 0x3B	; 59
 94c:	f0 e0       	ldi	r31, 0x00	; 0
 94e:	10 82       	st	Z, r1
 950:	04 c0       	rjmp	.+8      	; 0x95a <__stack+0xfb>
				break;

			case Disp_9:
				PORTA = Display_9;
 952:	eb e3       	ldi	r30, 0x3B	; 59
 954:	f0 e0       	ldi	r31, 0x00	; 0
 956:	80 e1       	ldi	r24, 0x10	; 16
 958:	80 83       	st	Z, r24

	DDRA = 0XFF;

	while(1){

		for (int i = 0; i < 10; i++){
 95a:	89 81       	ldd	r24, Y+1	; 0x01
 95c:	9a 81       	ldd	r25, Y+2	; 0x02
 95e:	01 96       	adiw	r24, 0x01	; 1
 960:	9a 83       	std	Y+2, r25	; 0x02
 962:	89 83       	std	Y+1, r24	; 0x01
 964:	89 81       	ldd	r24, Y+1	; 0x01
 966:	9a 81       	ldd	r25, Y+2	; 0x02
 968:	8a 30       	cpi	r24, 0x0A	; 10
 96a:	91 05       	cpc	r25, r1
 96c:	0c f4       	brge	.+2      	; 0x970 <__stack+0x111>
 96e:	7a cf       	rjmp	.-268    	; 0x864 <__stack+0x5>
 970:	76 cf       	rjmp	.-276    	; 0x85e <main+0x14>

00000972 <_exit>:
 972:	f8 94       	cli

00000974 <__stop_program>:
 974:	ff cf       	rjmp	.-2      	; 0x974 <__stop_program>
